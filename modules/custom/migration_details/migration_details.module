<?php

/**
 * @file
 * Contains migration_details.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function migration_details_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the migration_details module.
    case 'help.page.migration_details':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Apigee D7 to D8 details') . '</p>';
      return $output;

    default:
  }
}

/**
 * Function
 *
 * @param $str string
 *
 * @return array
 */
function convert_phptemplate($str) {
  $tokens = token_get_all($str);
  $output = '';

  // Unsupported tokens
  $mapping = [
    T_ARRAY,
    // array()
    T_BREAK,
    // break",
    T_CASE,
    // , // case in a switch",
    T_CONTINUE,
    // ", // continue in a loop",
    T_CURLY_OPEN,
    // ", // complex variable parsed syntax",
    T_DEFAULT,
    // ", // default in a switch",
    T_DO,
    // ", // do in a do..while",
    T_DOLLAR_OPEN_CURLY_BRACES,
    // complex variable parsed syntax",
    T_ENCAPSED_AND_WHITESPACE,
    // \" \$a\" constant part of string with variables",
    T_ENDSWITCH,
    // endswitch switch, alternative syntax",
    T_ENDWHILE,
    // endwhile while, alternative syntax",
    T_FOR,
    // for",
    T_INCLUDE,
    // include()",
    T_INCLUDE_ONCE,
    // include_once()",
    T_NUM_STRING,
    // \"\$a[0]\" numeric array index inside string",
    T_REQUIRE,
    // require()",
    T_REQUIRE_ONCE,
    // require_once()",
    T_STRING_VARNAME,
    // \"$\{a complex variable parsed syntax",
    T_SWITCH,
    // switch",
  ];

  // LIFO list of end tags
  $nesting = [];
  // list of flags
  $flags = [];

  $debug = 0;

  while ($token = current($tokens)) {
    $index = key($tokens);

    // Display information about tokens
    if (is_array($token) && ($debug || in_array($token[0], $mapping))) {
      //  echo "Index $index, Line {$token[2]}: ", token_name($token[0]), "\t\t{$token[1]}", PHP_EOL;
    }
    elseif ($debug) {
      // echo "Index $index, $token", PHP_EOL;
    }

    if (is_array($token)) {
      // Token, not characters
      $name = $token[0];
      $value = $token[1];

      // Some tokens depends on following expressions (+=, ++, etc.)
      if (isset($tokens[$index + 1])) {
        $i = $index;
        while (isset($tokens[$i + 1]) && $tokens[$i + 1][0] == T_WHITESPACE) {
          $i++;
        }
        $next = $tokens[$i + 1];
        if (is_array($next)) {
          if (in_array($next[0], [
            T_OR_EQUAL,
            T_PLUS_EQUAL,
            T_MUL_EQUAL,
            T_MINUS_EQUAL,
            T_MUL_EQUAL,
          ])) {
            $output .= $value . ' ' . substr($token[1], 0, 1) . ' ' . $value;
            next($tokens);
            continue;
          }
          elseif ($next[0] == T_INC) {
            $output .= "{% $value = $value + 1 %}";
            next($tokens);
            next($tokens);
            continue;
          }
          elseif ($next[0] == T_DEC) {
            $output .= "{% $value = $value - 1 %}";
            next($tokens);
            next($tokens);
            continue;
          }
        }
      }

      if (in_array($name, [
        T_OR_EQUAL,
        T_PLUS_EQUAL,
        T_MUL_EQUAL,
        T_MINUS_EQUAL,
        T_ISSET,
        T_DOUBLE_ARROW,
        T_OPEN_TAG,
        T_DOC_COMMENT, // TODO Convert to twig doc?
      ])) {
        // Ignore these tokens

      }
      elseif (in_array($name, [T_CLOSE_TAG, T_INLINE_HTML])) {
        // When closing tags or displaying HTML, end nesting
        $nest = array_pop($nesting);
        // Remove last space for filters
        if ($nest[0] == '|') {
          $output = rtrim($output, ' ');
        }
        $output .= $nest;
        $output .= str_replace("?>", "", $value);

      }
      elseif (in_array($name, [
        T_WHITESPACE,
        T_LOGICAL_AND,
        T_LOGICAL_OR,
        T_CONSTANT_ENCAPSED_STRING,
        T_LNUMBER,
        T_DNUMBER,
        T_IS_GREATER_OR_EQUAL,
        T_IS_SMALLER_OR_EQUAL,
      ])) {
        // These are the same in twig
        $output .= $value;

      }
      elseif ($name == T_VARIABLE) {
        // Variable, remove leading '$'
        $output .= substr($value, 1);

      }
      elseif ($name == T_ECHO || $name == T_PRINT) {
        // Print something
        $output .= '{{';
        $nesting[] = '}}';

      }
      elseif ($name == T_STRING) {
        // Function call
        if ($value == 't') {
          $nest = array_pop($nesting);
          $nesting[] = '|t ' . $nest;
        }
        elseif ($value == 'render') {
          // Ignore
        }
        elseif (in_array('inside_object_method', $flags) && next($tokens) !== '(') {
          $output .= $value;
        }
        else {
          $output .= $value . '(';
          $nesting[] = ')';
          $flags[] = 'inside_func_call';
          //echo "Unsupported function $value().\n";
        }
        // TODO maybe handle theme() ?

      }
      elseif ($name == T_IS_EQUAL || $name == T_IS_IDENTICAL) {
        $output .= ' is ';

      }
      elseif ($name == T_IS_NOT_EQUAL || $name == T_IS_NOT_IDENTICAL) {
        $output .= ' is not ';

      }
      elseif ($name == T_BOOLEAN_AND) {
        $output .= ' and ';

      }
      elseif ($name == T_BOOLEAN_OR) {
        $output .= ' or ';

      }
      elseif ($name == T_IF) {
        // There should be an expression after this, so we close it in ':' or '{'
        $output .= '{% if';
        $nesting[] = '%}';
        $flags[] = 'inside_condition';
        $flags[] = 'inside_if';

      }
      elseif ($name == T_ENDIF) {
        if (in_array('inside_if', $flags)) {
          unset($flags[array_search('inside_if', $flags)]);
        }
        $output .= '{% endif %}';

      }
      elseif ($name == T_ENDFOR || $name == T_ENDFOREACH) {
        $output .= '{% endfor %}';

      }
      elseif ($name == T_ELSEIF) {
        // There should be an expression after this, so we close it in ':' or '{'
        $output .= '{% elseif ';
        $flags[] = 'inside_condition';
        $nesting[] = '%}';

      }
      elseif ($name == T_ELSE) {
        $output .= '{% else %} ';

      }
      elseif ($name == T_OBJECT_OPERATOR) {
        // This is object call or property ->
        $flags[] = 'inside_object_method';
        $output .= '.';

      }
      elseif ($name == T_EMPTY) {
        // !empty() is managed in '!', flag to be closed in '?'
        $flags[] = 'inside_empty_condition';
        $nesting[] = 'is empty ';

      }
      elseif ($name == T_COMMENT) {
        if ($value[1] == '*') {
          // Multiline comment, remove ' * ' on each line
          $value = preg_replace('@/\*(.+)\s+\*/@sU', '{# $1 #}', $value);
          $value = preg_replace('@\s{3}\*\s@s', '', $value);
          $output .= $value;
        }
        else {
          // Single line comment that may be multiline (lol), so take care of this
          $output .= "{# ";
          prev($tokens);
          $matches = NULL;
          while (($token = next($tokens)) && is_array($token) && in_array($token[0],
              [T_WHITESPACE, T_COMMENT])) {
            if ($token[0] == T_COMMENT) {
              if (isset($matches[2])) {
                $output .= "$matches[2]";
              }
              preg_match('@^//\s?(.*)(\s*)@', $token[1], $matches);
              $output .= "$matches[1]";
            }
            else {
              $matches[2] .= "$token[1]";
            }
          }
          $output .= " #}" . $matches[2];
          prev($tokens);
        }

      }
      elseif ($name == T_FOREACH) {
        // foreach($iterated as $index => $value) -> for(value in iterated) _or_ for(index, value in iterated)
        $output .= '{% for';
        while (!is_array($token) || !in_array($token[0], [
            T_VARIABLE,
            T_STRING,
          ])) {
          $token = next($tokens);
        }
        $iterated = substr($token[1], 1);
        while (!is_array($token) || $token[0] !== T_AS) {
          $token = next($tokens);
        }
        while (!is_array($token) || $token[0] !== T_VARIABLE) {
          $token = next($tokens);
        }
        $index_name = substr($token[1], 1);

        // Try to find value in next four tokens
        $i = 6;
        while (($token = next($tokens)) && $i) {
          if (is_array($token) && $token[0] == T_VARIABLE) {
            $value = substr($token[1], 1);
            $output .= " $index_name, $value in $iterated %}";
            break;
          }
          $i--;
        }
        if (!$i) {
          $output .= " $index_name in $iterated %}";
          // We've got too far, go back a bit
          prev($tokens);
          prev($tokens);
          prev($tokens);
          prev($tokens);
        }

      }
      else {
        // unsupported
        //        echo "WARNING: UNSUPPORTED " . token_name($token[0]) . "\n";
      }
    }
    else {
      // Characters
      switch ($token) {
        case ';':
          // This close a function call or a print
          if (in_array('inside_func_call', $flags)) {
            $output .= array_pop($nesting);
            unset($flags[array_search('inside_func_call', $flags)]);
          }
          if (in_array('}}', $nesting)) {
            $output .= ' ' . array_pop($nesting);
          }
          break;

        case ':':
          // This must print inside ternary, else we don't care
          if (in_array('inside_ternary', $flags)) {
            $output .= $token;
            unset($flags[array_search('inside_ternary', $flags)]);
          }
          // This might close a if expression
          if (in_array('inside_condition', $flags)) {
            $output .= ' ' . array_pop($nesting);
            unset($flags[array_search('inside_condition', $flags)]);
          }
          break;

        case '(':
        case ')':
        case ']':
          // Ignored
          break;

        case '{':
          // This might close an expression
          if (count($nesting)) {
            $output .= array_pop($nesting);
          }
          break;

        case '}':
          // This might close a if block
          if (in_array('inside_if', $flags)) {
            $output .= '{% endif %}';
            unset($flags[array_search('inside_if', $flags)]);
          }
          break;

        case '[':
          // Accessing key of an array
          $next = next($tokens);
          if (is_array($next) && $next[0] == T_CONSTANT_ENCAPSED_STRING) {
            if ($next[1][1] == '#') {
              // verify unsupported first characters
              $output .= "[$next[1]]";
            }
            else {
              // else remove quotes
              $output .= '.' . substr($next[1], 1, -1);
            }
          }
          elseif (is_array($next) && $next[0] == T_VARIABLE) {
            // Remove leading '$'
            $output .= '.' . substr($next[1], 1);
          }
          elseif (is_array($next) && $next[0] == T_LNUMBER) {
            // no treatment on numbers
            $output .= '.' . $next[1];
          }
          elseif (is_array($next)) {
            die("Unsupported array/object traversing with " . token_name($next[0]));
          }
          else {
            die("Unsupported array/object traversing with $next");
          }
          break;

        case '!':
          // Verify next token is not empty()
          $next = next($tokens);
          if (is_array($next) && $next[0] == T_EMPTY) {
            // if empty(), ignore
          }
          else {
            prev($tokens);
            $output .= "not ";
          }
          break;

        case '.':
          // Concatenation
          $output .= '~';
          break;

        case '?':
          // Ternary condition
          if (in_array('inside_empty_condition', $flags)) {
            $output .= array_pop($nesting);
            unset($flags[array_search('inside_empty_condition', $flags)]);
          }
          $flags[] = 'inside_ternary';
          $output .= $token;
          break;

        case ',':
        case '%':
        case '*':
        case '/':
        case '+':
        case '-':
          // Same as twig
          $output .= $token;
          break;
      }
    }
    next($tokens);
  }

  if ($debug) {
    echo $str, $output, "\n";
  }

  return $output;
}

/**
 * @param \Drupal\file\FileInterface $file
 * Implements hook_file_presave().
 */
function migration_details_file_presave(Drupal\file\FileInterface $file) {
  # FORCED FILE REPLACE ON UPLOAD
  if ($file->isNewRevision() == 1) {
    $uploaded_filename = $file->getFilename();
    $old_uri = $file->getFileUri();
    $path = pathinfo($old_uri);
    $name = explode('.', $uploaded_filename);
    $file_name = explode('_', $name[0]);
    $last_name = end($file_name);
    if (is_numeric($last_name)) {
      array_pop($file_name);
      $uploaded_filename = implode('_', $file_name) . '.sql';
    }
    $new_uri = $path['dirname'] . '/' . $uploaded_filename;
    # Copy the uploaded file over the original
    if ($old_uri != $new_uri) {
      $file->setFilename($uploaded_filename);
      $file->setFileUri($new_uri);
      file_unmanaged_copy($old_uri, $new_uri, FILE_EXISTS_REPLACE);
      unlink($old_uri);
    }
  }
}
